import { Page } from '@playwright/test';
import { BasePage } from './BasePage';

export class LoginPage extends BasePage {
  // ParaBank Selectors
  private readonly selectors = {
    usernameInput: 'input[name="username"]',
    passwordInput: 'input[name="password"]',
    loginButton: 'input[value="Log In"]',
    errorMessage: '.error',
    forgotPasswordLink: 'a[href="lookup.htm"]',
    registerLink: 'a[href="register.htm"]',
    loginPanel: '#loginPanel',
    loginForm: 'form[name="login"]'
  };

  constructor(page: Page) {
    super(page, 'https://parabank.parasoft.com/parabank/index.htm');
  }

  /**
   * Navigate to ParaBank login page
   */
  async navigateToLogin(): Promise<void> {
    await this.navigate();
    await this.waitForPageLoad();
    await this.assertElementVisible(this.selectors.loginPanel);
  }

  /**
   * Perform login with ParaBank credentials
   */
  async login(username: string, password: string): Promise<void> {
    await this.fillInput(this.selectors.usernameInput, username);
    await this.fillInput(this.selectors.passwordInput, password);
    await this.clickElement(this.selectors.loginButton);
    await this.waitForPageLoad();
  }

  /**
   * Perform quick login with valid ParaBank demo credentials
   */
  async quickLogin(): Promise<void> {
    await this.login('john', 'demo');
  }

  /**
   * Get error message text
   */
  async getErrorMessage(): Promise<string | null> {
    return await this.getTextContent(this.selectors.errorMessage);
  }

  /**
   * Click forgot password link
   */
  async clickForgotPassword(): Promise<void> {
    await this.clickElement(this.selectors.forgotPasswordLink);
  }

  /**
   * Click register link
   */
  async clickRegister(): Promise<void> {
    await this.clickElement(this.selectors.registerLink);
  }

  /**
   * Assert ParaBank login form is visible
   */
  async assertLoginFormVisible(): Promise<void> {
    await this.assertElementVisible(this.selectors.usernameInput);
    await this.assertElementVisible(this.selectors.passwordInput);
    await this.assertElementVisible(this.selectors.loginButton);
    await this.assertElementVisible(this.selectors.loginPanel);
  }

  /**
   * Assert error message is displayed
   */
  async assertErrorDisplayed(): Promise<void> {
    await this.assertElementVisible(this.selectors.errorMessage);
  }

  /**
   * Check if error message is visible
   */
  async isErrorMessageVisible(): Promise<boolean> {
    return await this.isVisible(this.selectors.errorMessage);
  }

  /**
   * Fill username field
   */
  async fillUsername(username: string): Promise<void> {
    await this.fillInput(this.selectors.usernameInput, username);
  }

  /**
   * Fill password field
   */
  async fillPassword(password: string): Promise<void> {
    await this.fillInput(this.selectors.passwordInput, password);
  }

  /**
   * Click login button
   */
  async clickLoginButton(): Promise<void> {
    await this.clickElement(this.selectors.loginButton);
  }

  /**
   * Get page title (ParaBank specific)
   */
  async getPageTitle(): Promise<string> {
    return await this.page.title();
  }

  /**
   * Wait for login form to be loaded
   */
  async waitForLoginForm(): Promise<void> {
    await this.waitForElement(this.selectors.loginForm);
    await this.waitForElement(this.selectors.usernameInput);
  }
}

import { Page } from '@playwright/test';
import { BasePage } from './BasePage';

export class DashboardPage extends BasePage {
  // ParaBank Dashboard Selectors
  private readonly selectors = {
    accountsOverview: 'a[href*="overview.htm"]',
    transferFunds: 'a[href*="transfer.htm"]',
    billPay: 'a[href*="billpay.htm"]',
    findTransactions: 'a[href*="findtrans.htm"]',
    updateContactInfo: 'a[href*="updateprofile.htm"]',
    requestLoan: 'a[href*="requestloan.htm"]',
    logoutLink: 'a[href*="logout.htm"]',
    welcomeMessage: '.welcome',
    accountTable: '#accountTable',
    accountNumbers: 'a[href*="activity.htm"]',
    totalBalance: '#totalBalance',
    leftPanel: '#leftPanel',
    accountsTable: 'table#accountTable'
  };

  constructor(page: Page) {
    super(page, 'https://parabank.parasoft.com/parabank/overview.htm');
  }

  /**
   * Navigate to dashboard/overview page
   */
  async navigateToDashboard(): Promise<void> {
    await this.navigate();
    await this.waitForPageLoad();
  }

  /**
   * Assert dashboard is loaded
   */
  async assertDashboardLoaded(): Promise<void> {
    await this.assertElementVisible(this.selectors.leftPanel);
    await this.assertElementVisible(this.selectors.accountsOverview);
  }

  /**
   * Get welcome message
   */
  async getWelcomeMessage(): Promise<string | null> {
    try {
      return await this.getTextContent(this.selectors.welcomeMessage);
    } catch {
      // If no specific welcome message, return page title
      return await this.page.title();
    }
  }

  /**
   * Check if user is logged in (by checking if dashboard elements are visible)
   */
  async isUserLoggedIn(): Promise<boolean> {
    return await this.isVisible(this.selectors.accountsOverview);
  }

  /**
   * Navigate to Accounts Overview
   */
  async goToAccountsOverview(): Promise<void> {
    await this.clickElement(this.selectors.accountsOverview);
    await this.waitForPageLoad();
  }

  /**
   * Navigate to Transfer Funds
   */
  async goToTransferFunds(): Promise<void> {
    await this.clickElement(this.selectors.transferFunds);
    await this.waitForPageLoad();
  }

  /**
   * Navigate to Bill Pay
   */
  async goToBillPay(): Promise<void> {
    await this.clickElement(this.selectors.billPay);
    await this.waitForPageLoad();
  }

  /**
   * Navigate to Find Transactions
   */
  async goToFindTransactions(): Promise<void> {
    await this.clickElement(this.selectors.findTransactions);
    await this.waitForPageLoad();
  }

  /**
   * Navigate to Update Profile (equivalent to settings)
   */
  async goToSettings(): Promise<void> {
    await this.clickElement(this.selectors.updateContactInfo);
    await this.waitForPageLoad();
  }

  /**
   * Navigate to Update Profile (equivalent to profile)
   */
  async goToProfile(): Promise<void> {
    await this.clickElement(this.selectors.updateContactInfo);
    await this.waitForPageLoad();
  }

  /**
   * Navigate to Request Loan
   */
  async goToRequestLoan(): Promise<void> {
    await this.clickElement(this.selectors.requestLoan);
    await this.waitForPageLoad();
  }

  /**
   * Perform logout
   */
  async logout(): Promise<void> {
    await this.clickElement(this.selectors.logoutLink);
    await this.waitForPageLoad();
  }

  /**
   * Get account numbers from the accounts table
   */
  async getAccountNumbers(): Promise<string[]> {
    const accountLinks = await this.page.locator(this.selectors.accountNumbers).all();
    const accountNumbers: string[] = [];
    
    for (const link of accountLinks) {
      const text = await link.textContent();
      if (text) {
        accountNumbers.push(text.trim());
      }
    }
    
    return accountNumbers;
  }

  /**
   * Get total balance
   */
  async getTotalBalance(): Promise<string | null> {
    return await this.getTextContent(this.selectors.totalBalance);
  }

  /**
   * Check if accounts table is visible
   */
  async isAccountsTableVisible(): Promise<boolean> {
    return await this.isVisible(this.selectors.accountsTable);
  }

  /**
   * Wait for dashboard to load completely
   */
  async waitForDashboardLoad(): Promise<void> {
    await this.waitForElement(this.selectors.leftPanel);
    await this.waitForElement(this.selectors.accountsOverview);
  }
}

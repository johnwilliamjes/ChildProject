"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginPage = void 0;
const BasePage_1 = require("./BasePage");
class LoginPage extends BasePage_1.BasePage {
    // ParaBank Selectors
    selectors = {
        usernameInput: 'input[name="username"]',
        passwordInput: 'input[name="password"]',
        loginButton: 'input[value="Log In"]',
        errorMessage: '.error',
        forgotPasswordLink: 'a[href="lookup.htm"]',
        registerLink: 'a[href="register.htm"]',
        loginPanel: '#loginPanel',
        loginForm: 'form[name="login"]'
    };
    constructor(page) {
        super(page, 'https://parabank.parasoft.com/parabank/index.htm');
    }
    /**
     * Navigate to ParaBank login page
     */
    async navigateToLogin() {
        await this.navigate();
        await this.waitForPageLoad();
        await this.assertElementVisible(this.selectors.loginPanel);
    }
    /**
     * Perform login with ParaBank credentials
     */
    async login(username, password) {
        await this.fillInput(this.selectors.usernameInput, username);
        await this.fillInput(this.selectors.passwordInput, password);
        await this.clickElement(this.selectors.loginButton);
        await this.waitForPageLoad();
    }
    /**
     * Perform quick login with valid ParaBank demo credentials
     */
    async quickLogin() {
        await this.login('john', 'demo');
    }
    /**
     * Get error message text
     */
    async getErrorMessage() {
        return await this.getTextContent(this.selectors.errorMessage);
    }
    /**
     * Click forgot password link
     */
    async clickForgotPassword() {
        await this.clickElement(this.selectors.forgotPasswordLink);
    }
    /**
     * Click register link
     */
    async clickRegister() {
        await this.clickElement(this.selectors.registerLink);
    }
    /**
     * Assert ParaBank login form is visible
     */
    async assertLoginFormVisible() {
        await this.assertElementVisible(this.selectors.usernameInput);
        await this.assertElementVisible(this.selectors.passwordInput);
        await this.assertElementVisible(this.selectors.loginButton);
        await this.assertElementVisible(this.selectors.loginPanel);
    }
    /**
     * Assert error message is displayed
     */
    async assertErrorDisplayed() {
        await this.assertElementVisible(this.selectors.errorMessage);
    }
    /**
     * Check if error message is visible
     */
    async isErrorMessageVisible() {
        return await this.isVisible(this.selectors.errorMessage);
    }
    /**
     * Fill username field
     */
    async fillUsername(username) {
        await this.fillInput(this.selectors.usernameInput, username);
    }
    /**
     * Fill password field
     */
    async fillPassword(password) {
        await this.fillInput(this.selectors.passwordInput, password);
    }
    /**
     * Click login button
     */
    async clickLoginButton() {
        await this.clickElement(this.selectors.loginButton);
    }
    /**
     * Get page title (ParaBank specific)
     */
    async getPageTitle() {
        return await this.page.title();
    }
    /**
     * Wait for login form to be loaded
     */
    async waitForLoginForm() {
        await this.waitForElement(this.selectors.loginForm);
        await this.waitForElement(this.selectors.usernameInput);
    }
}
exports.LoginPage = LoginPage;
//# sourceMappingURL=LoginPage.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardPage = void 0;
const BasePage_1 = require("./BasePage");
class DashboardPage extends BasePage_1.BasePage {
    // ParaBank Dashboard Selectors
    selectors = {
        accountsOverview: 'a[href*="overview.htm"]',
        transferFunds: 'a[href*="transfer.htm"]',
        billPay: 'a[href*="billpay.htm"]',
        findTransactions: 'a[href*="findtrans.htm"]',
        updateContactInfo: 'a[href*="updateprofile.htm"]',
        requestLoan: 'a[href*="requestloan.htm"]',
        logoutLink: 'a[href*="logout.htm"]',
        welcomeMessage: '.welcome',
        accountTable: '#accountTable',
        accountNumbers: 'a[href*="activity.htm"]',
        totalBalance: '#totalBalance',
        leftPanel: '#leftPanel',
        accountsTable: 'table#accountTable'
    };
    constructor(page) {
        super(page, 'https://parabank.parasoft.com/parabank/overview.htm');
    }
    /**
     * Navigate to dashboard/overview page
     */
    async navigateToDashboard() {
        await this.navigate();
        await this.waitForPageLoad();
    }
    /**
     * Assert dashboard is loaded
     */
    async assertDashboardLoaded() {
        await this.assertElementVisible(this.selectors.leftPanel);
        await this.assertElementVisible(this.selectors.accountsOverview);
    }
    /**
     * Get welcome message
     */
    async getWelcomeMessage() {
        try {
            return await this.getTextContent(this.selectors.welcomeMessage);
        }
        catch {
            // If no specific welcome message, return page title
            return await this.page.title();
        }
    }
    /**
     * Check if user is logged in (by checking if dashboard elements are visible)
     */
    async isUserLoggedIn() {
        return await this.isVisible(this.selectors.accountsOverview);
    }
    /**
     * Navigate to Accounts Overview
     */
    async goToAccountsOverview() {
        await this.clickElement(this.selectors.accountsOverview);
        await this.waitForPageLoad();
    }
    /**
     * Navigate to Transfer Funds
     */
    async goToTransferFunds() {
        await this.clickElement(this.selectors.transferFunds);
        await this.waitForPageLoad();
    }
    /**
     * Navigate to Bill Pay
     */
    async goToBillPay() {
        await this.clickElement(this.selectors.billPay);
        await this.waitForPageLoad();
    }
    /**
     * Navigate to Find Transactions
     */
    async goToFindTransactions() {
        await this.clickElement(this.selectors.findTransactions);
        await this.waitForPageLoad();
    }
    /**
     * Navigate to Update Profile (equivalent to settings)
     */
    async goToSettings() {
        await this.clickElement(this.selectors.updateContactInfo);
        await this.waitForPageLoad();
    }
    /**
     * Navigate to Update Profile (equivalent to profile)
     */
    async goToProfile() {
        await this.clickElement(this.selectors.updateContactInfo);
        await this.waitForPageLoad();
    }
    /**
     * Navigate to Request Loan
     */
    async goToRequestLoan() {
        await this.clickElement(this.selectors.requestLoan);
        await this.waitForPageLoad();
    }
    /**
     * Perform logout
     */
    async logout() {
        await this.clickElement(this.selectors.logoutLink);
        await this.waitForPageLoad();
    }
    /**
     * Get account numbers from the accounts table
     */
    async getAccountNumbers() {
        const accountLinks = await this.page.locator(this.selectors.accountNumbers).all();
        const accountNumbers = [];
        for (const link of accountLinks) {
            const text = await link.textContent();
            if (text) {
                accountNumbers.push(text.trim());
            }
        }
        return accountNumbers;
    }
    /**
     * Get total balance
     */
    async getTotalBalance() {
        return await this.getTextContent(this.selectors.totalBalance);
    }
    /**
     * Check if accounts table is visible
     */
    async isAccountsTableVisible() {
        return await this.isVisible(this.selectors.accountsTable);
    }
    /**
     * Wait for dashboard to load completely
     */
    async waitForDashboardLoad() {
        await this.waitForElement(this.selectors.leftPanel);
        await this.waitForElement(this.selectors.accountsOverview);
    }
}
exports.DashboardPage = DashboardPage;
//# sourceMappingURL=DashboardPage.js.map